{"version":3,"file":"static/js/67.061bd5f7.chunk.js","mappings":"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","sources":["components/input/Input.jsx","components/contacts/Titles/Titles.styled.jsx","components/contacts/Titles/Titles.jsx","components/contacts/filter/filter.styled.jsx","components/contacts/filter/filter.jsx","components/contacts/Item/item.styled.jsx","components/contacts/Item/item.jsx","components/contacts/contactsList/contactsList.styled.jsx","components/contacts/contactsList/contactsList.jsx","pages/Contacts.js"],"sourcesContent":["import { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport { useDispatch,useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport Notiflix from 'notiflix';\nimport { TextField,Button } from '@mui/material';\n\nconst schema = yup.object().shape({\n  name: yup.string().min(3).max(32).required(),\n  \n  number: yup.string().min(3).max(14).required(),\n});\n\nexport const Input = () => {\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      number: '',\n    },\n    validationSchema: schema,\n    onSubmit: (values, {resetForm}) => {\n      if (\n        contacts.find(\n          contact => contact.name.toLowerCase() === values.name.toLowerCase()\n        )\n      ) {\n        return Notiflix.Notify.failure(`${values.name} is already in contacts`);\n      }\n      dispatch(addContact(values));\n      resetForm();\n    },\n  });\n  \n  return (\n    <div>\n      <form onSubmit={formik.handleSubmit}>\n        <TextField\n          fullWidth\n          id=\"name\"\n          name=\"name\"\n          label=\"Name\"\n          value={formik.values.name}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          error={formik.touched.name && Boolean(formik.errors.name)}\n          helperText={formik.touched.name && formik.errors.name}\n          sx={{mb:2}}\n        />\n        <TextField\n          fullWidth\n          id=\"number\"\n          name=\"number\"\n          label=\"Number\"\n          type=\"number\"\n          value={formik.values.number}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          error={formik.touched.number && Boolean(formik.errors.number)}\n          helperText={formik.touched.number && formik.errors.number}\n          sx={{mb:2}}\n        />\n        <Button color=\"primary\" variant=\"contained\" fullWidth type=\"submit\">\n          Add contact\n        </Button>\n      </form>\n    </div>\n  );\n\n  // return (\n  //   <Formik\n  //     initialValues={initialValues}\n  //     validationSchema={schema}\n  //     onSubmit={handleFormSubmit}\n  //   >\n  //     <FormWrapper>\n  //       <FormInput\n  //         type=\"text\"\n  //         name=\"name\"\n  //         placeholder=\"name\"\n  //         title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n  //       />\n  //       <Error name=\"name\" component=\"div\" />\n  //       <FormInput\n  //         type=\"tel\"\n  //         name=\"number\"\n  //         placeholder=\"number\"\n  //         title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n  //       />\n  //       <Error name=\"number\" component=\"div\" />\n  //       <Button type=\"submit\">Add to contacts</Button>\n  //     </FormWrapper>\n  //   </Formik>\n  // );\n};\n\n","import styled from \"styled-components\";\n\nexport const MainTitle = styled.h1`\nposition:relative;\n  font-size: 44px;\n  font-weight: 700;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  white-space: nowrap;\n  padding-bottom: 13px;\n\n  &:before {\n    background-color: #1976D2;\n    content: '';\n    display: block;\n    height: 3px;\n    width: 75px;\n    margin-bottom: 5px;\n  }\n\n  &:after {\n    background-color: #1976D2;\n    content: '';\n    display: block;\n  position:absolute; right:0; bottom:0;\n    height: 3px;\n    width: 75px;\n    margin-bottom: 0.25em;\n  }\n`;\n\nexport const Span = styled.span`\n\n color:  #1976D2;\n\n`\n\nexport const SecondaryTitle = styled.h1`\n  font-size: 32px;\n  font-weight: 600;\n  text-align: center;\n`;\n","import { MainTitle, SecondaryTitle, Span } from './Titles.styled';\n\nexport const Title = () => {\n  return (\n    <MainTitle>\n      Phonebo<Span>ok</Span>\n    </MainTitle>\n  );\n};\n\nexport const SubTitle = () => {\n  return <SecondaryTitle>Contacts</SecondaryTitle>;\n};\n","import styled from \"@emotion/styled\";\n\n\nexport const Wrapper = styled.div`\n\nwidth:100%;\n\n`\n\n\nexport const Input = styled.input`\n\nwidth: 100%;\npadding: 12px 20px;\nmargin: 8px 0;\ndisplay: inline-block;\nborder: 1px solid #ccc;\nborder-radius: 4px;\n box-sizing: border-box;\n\n`\n\nexport const Title = styled.h3`\n\ntext-align:center;\n\n\n`","import { useSelector } from \"react-redux\";\nimport {Input,Wrapper,Title} from './filter.styled';\nimport { selectFilter } from \"redux/contacts/selectors\";\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from \"redux/contacts/filterSlice\";\n\n\nexport const Filter = () => {\n\n  const dispatch = useDispatch();\n  const handleInputChange = e => dispatch(setFilter(e.target.value));\n\n  const filter = useSelector(selectFilter);\n  return (\n    <Wrapper>\n      <Title>Find contacts by name</Title>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Who are you looking for?..\"\n        value={filter}\n        onChange={handleInputChange}\n      />\n    </Wrapper>\n  );\n};\n\n","\nimport styled from \"@emotion/styled\";\n\nexport const Contact = styled.p`\n\nfont-size:16px;\nfont-weight: bold;\n\n`\n\nexport const Tel = Contact.withComponent('number');\n\nexport const Wrapper = styled.div`\n \ndisplay:flex;\ngap:10px;\nalign-items:center;\n`\n\n\nexport const Delete = styled.div`\n  \ncursor:pointer;\n\n`\n\n","import {Wrapper,Contact,Tel,Delete} from \"./item.styled\"\nimport { AiFillDelete } from 'react-icons/ai';\nimport { FcBusinessContact } from 'react-icons/fc';\nimport { BsTelephoneOutbound } from 'react-icons/bs';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from \"redux/contacts/operations\";\n\nexport const ItemContact = ({name,number,id}) => {\n\n  const dispatch = useDispatch();\n\n  const handleContactDelete = id => {\n\n    dispatch(deleteContact(id));\n  };\n\n return (\n   \n    <>\n<Wrapper>\n  <FcBusinessContact size={20} />\n  <Contact>{name}</Contact>\n</Wrapper>\n<Wrapper>\n  <BsTelephoneOutbound size={20} />\n  <Tel>{number}</Tel>\n</Wrapper>\n<Delete role=\"button\" aria-label=\"Delete\" onClick={() => handleContactDelete(id)}>\n  <AiFillDelete size={20} />\n</Delete>\n</>\n)\n}\n\n","import styled from \"@emotion/styled\";\n\n\nexport const List = styled.ul`\n\nwidth:100%;\npadding-left:15px;\npadding-right:15px;\n\n`\n\nexport const Item = styled.li`\n\ndisplay:flex;\nalign-items:center;\njustify-content: space-between;\nmargin-bottom:10px;\n`\n\nexport const EmptyList = styled.p`\n\n font-size:20px;\n font-style: italic;\n\n\n`\n\n","import { ItemContact } from '../Item';\nimport { List, Item, EmptyList } from './contactsList.styled';\nimport { useSelector } from 'react-redux';\nimport { selectFiltredContacts } from 'redux/contacts/selectors';\n\nexport const ContactsList = () => {\n  const filtredContacts = useSelector(selectFiltredContacts);\n\n  return (\n    <>\n      <List>\n        {filtredContacts.length === 0 && (\n          <EmptyList>There aren't contacts yet. Let's add somebody.</EmptyList>\n        )}\n        {filtredContacts.map(({ id, name, number }) => (\n          <Item key={id}>\n            <ItemContact name={name} number={number} id={id} />\n          </Item>\n        ))}\n      </List>\n    </>\n  );\n};\n\n\n","\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Input } from 'components/input';\nimport { Title, SubTitle } from 'components/contacts/Titles';\nimport { Filter } from 'components/contacts/filter';\nimport { selectError, selectLoading } from 'redux/contacts/selectors';\nimport { ContactsList } from 'components/contacts/contactsList';\nimport { fetchContacts } from 'redux/contacts';\n\n\nconst Contacts = () => {\n\n      const dispatch = useDispatch();\n      const isLoading = useSelector(selectLoading);\n      const error = useSelector(selectError);\n\n      useEffect(() => {\n   \n        dispatch(fetchContacts())\n\n      },[dispatch])\n\n    return (\n        \n        <>\n      <Title/>     \n      <Input/>\n      <SubTitle/>\n      <Filter />\n      {isLoading && <p>Loading contacts...</p> }\n      {error && <p>{error}</p>}\n      <ContactsList/>\n        </>\n    )\n}\n\nexport default Contacts;\n\n"],"names":["schema","yup","shape","name","min","max","required","number","Input","dispatch","useDispatch","contacts","useSelector","selectContacts","formik","useFormik","initialValues","validationSchema","onSubmit","values","resetForm","find","contact","toLowerCase","Notiflix","addContact","handleSubmit","TextField","fullWidth","id","label","value","onChange","handleChange","onBlur","handleBlur","error","touched","Boolean","errors","helperText","sx","mb","type","Button","color","variant","MainTitle","styled","Span","SecondaryTitle","Title","SubTitle","Wrapper","Filter","filter","selectFilter","placeholder","e","setFilter","target","Contact","Tel","withComponent","Delete","ItemContact","size","role","onClick","deleteContact","handleContactDelete","List","Item","EmptyList","ContactsList","filtredContacts","selectFiltredContacts","length","map","isLoading","selectLoading","selectError","useEffect","fetchContacts"],"sourceRoot":""}